/* ===============================
   CSS FUNDAMENTALS CHEAT SHEET
   =============================== */

/* SELECTORS
   How to target HTML elements */
.class-name     /* Targets elements with class="class-name" */
#unique-id      /* Targets single element with id="unique-id" */
div             /* Targets all <div> elements */
div.class-name  /* Targets only <div> elements with class="class-name" */
div > p         /* Targets <p> that are direct children of <div> */
div p           /* Targets all <p> inside <div> (even nested deeply) */

/* FLEXBOX
   Used for one-dimensional layouts (rows OR columns) */
.flex-container {
    display: flex;              /* Enables flexbox */
    justify-content: center;    /* Horizontal alignment */
    align-items: center;        /* Vertical alignment */
    gap: 20px;                 /* Space between flex items */
    flex-direction: column;     /* Stack items vertically */
}

/* GRID
   Used for two-dimensional layouts (rows AND columns) */
.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Responsive columns */
    gap: 20px;                 /* Space between grid items */
}

/* POSITIONING
   How elements are positioned in the document flow */
.element {
    position: relative;    /* Relative to its normal position */
    position: absolute;    /* Relative to nearest positioned ancestor */
    position: fixed;       /* Relative to viewport (stays when scrolling) */
    position: sticky;      /* Hybrid of relative and fixed */
    z-index: 100;         /* Stack order (higher numbers show on top) */
}

/* TRANSITIONS & ANIMATIONS
   Smooth changes between states */
.smooth-change {
    transition: all 0.3s ease;  /* Property Duration Timing-function */
}

/* Example animation */
@keyframes slideIn {
    from { transform: translateX(-100%); }
    to { transform: translateX(0); }
}

/* BOX MODEL
   Space around and between elements */
.box {
    margin: 10px;         /* Space outside the border */
    padding: 15px;        /* Space between content and border */
    border: 1px solid;    /* Border around element */
    border-radius: 8px;   /* Rounded corners */
}

/* RESPONSIVE DESIGN
   Adapting layouts to different screen sizes */
@media (max-width: 768px) {
    /* Styles for screens smaller than 768px */
    .container {
        flex-direction: column;
    }
}

/* GRADIENTS
   Smooth color transitions */
.gradient-bg {
    background: linear-gradient(135deg, #start-color, #end-color);
    background: radial-gradient(circle, #center-color, #edge-color);
}

/* SHADOWS
   Adding depth to elements */
.depth {
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);  /* x-offset y-offset blur color */
    text-shadow: 1px 1px 2px rgba(0,0,0,0.5); /* For text */
}

/* CSS VARIABLES
   Reusable values */
:root {
    --primary-color: #5C6BC0;
    --spacing-unit: 8px;
}
.element {
    color: var(--primary-color);
    padding: var(--spacing-unit);
}

/* TRANSFORMATIONS
   Modify element appearance */
.transform {
    transform: translateY(-5px);     /* Move up 5px */
    transform: scale(1.1);          /* Increase size by 10% */
    transform: rotate(45deg);       /* Rotate 45 degrees */
}

/* COMMON PATTERNS
   Frequently used combinations */
/* Glass effect */
.glassmorphism {
    background: rgba(255, 255, 255, 0.2);
    backdrop-filter: blur(8px);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

/* Card hover effect */
.card {
    transition: transform 0.2s ease, box-shadow 0.2s ease;
}
.card:hover {
    transform: translateY(-3px);
    box-shadow: 0 6px 16px rgba(0,0,0,0.1);
}

/* BEST PRACTICES
1. Use meaningful class names
2. Keep selectors specific but not too nested
3. Group related styles
4. Use comments for complex sections
5. Maintain consistent spacing and formatting
6. Use CSS variables for repeated values
7. Consider mobile-first approach
8. Optimize performance (avoid expensive properties)
*/